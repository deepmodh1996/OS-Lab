diff --git a/Makefile b/Makefile
index 93d525a..693a0d9 100644
--- a/Makefile
+++ b/Makefile
@@ -173,6 +173,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_testcow\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -180,7 +181,7 @@ fs.img: mkfs README $(UPROGS)
 -include *.d
 
 clean: 
-	rm -f *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
+	rm -cow *.tex *.dvi *.idx *.aux *.log *.ind *.ilg \
 	*.o *.d *.asm *.sym vectors.S bootblock entryother \
 	initcode initcode.out kernel xv6.img fs.img kernelmemfs mkfs \
 	.gdbinit \
diff --git a/defs.h b/defs.h
index 8f01b1f..85ca89e 100644
--- a/defs.h
+++ b/defs.h
@@ -68,6 +68,7 @@ char*           kalloc(void);
 void            kfree(char*);
 void            kinit1(void*, void*);
 void            kinit2(void*, void*);
+int 			knumfreepages(void);
 
 // kbd.c
 void            kbdintr(void);
@@ -181,6 +182,7 @@ void            switchuvm(struct proc*);
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+void			pagefault(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kalloc.c b/kalloc.c
index ca30d55..5cf195c 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -20,6 +20,7 @@ struct {
   struct spinlock lock;
   int use_lock;
   struct run *freelist;
+  uint sz;    //to track size of list
 } kmem;
 
 // Initialization happens in two phases.
@@ -32,6 +33,7 @@ kinit1(void *vstart, void *vend)
 {
   initlock(&kmem.lock, "kmem");
   kmem.use_lock = 0;
+  kmem.sz=0;
   freerange(vstart, vend);
 }
 
@@ -72,6 +74,7 @@ kfree(char *v)
   r = (struct run*)v;
   r->next = kmem.freelist;
   kmem.freelist = r;
+  kmem.sz++;
   if(kmem.use_lock)
     release(&kmem.lock);
 }
@@ -87,10 +90,24 @@ kalloc(void)
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+    kmem.sz--;
+  }
   if(kmem.use_lock)
     release(&kmem.lock);
   return (char*)r;
 }
 
+// returns the size of freelist and hence the number of free pages
+int
+knumfreepages(void)
+{
+  int size;
+  if(kmem.use_lock)
+    acquire(&kmem.lock);
+  size=kmem.sz;  
+  if(kmem.use_lock)
+    release(&kmem.lock);
+  return size;
+}
\ No newline at end of file
diff --git a/mmu.h b/mmu.h
index e732ccd..d6d198b 100644
--- a/mmu.h
+++ b/mmu.h
@@ -118,6 +118,9 @@ struct segdesc {
 // page table index
 #define PTX(va)         (((uint)(va) >> PTXSHIFT) & 0x3FF)
 
+// page ref array index
+#define PRX(pa)         ((uint)(pa) >> PGSHIFT)
+
 // construct virtual address from indexes and offset
 #define PGADDR(d, t, o) ((uint)((d) << PDXSHIFT | (t) << PTXSHIFT | (o)))
 
@@ -143,6 +146,8 @@ struct segdesc {
 #define PTE_D           0x040   // Dirty
 #define PTE_PS          0x080   // Page Size
 #define PTE_MBZ         0x180   // Bits must be zero
+#define PTE_COW         0x200   // Copy on write
+#define PTE_WCOW        0x400   // Writable before copy on write
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/syscall.c b/syscall.c
index 9ae7536..04b94a5 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getnumfreepages(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getnumfreepages]   sys_getnumfreepages,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..e86882e 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getnumfreepages  22
diff --git a/sysproc.c b/sysproc.c
index 6b585e0..3a81a48 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,9 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_getnumfreepages(void)
+{
+  return knumfreepages();
+}
\ No newline at end of file
diff --git a/trap.c b/trap.c
index e6b3784..9687845 100644
--- a/trap.c
+++ b/trap.c
@@ -47,6 +47,9 @@ trap(struct trapframe *tf)
   }
 
   switch(tf->trapno){
+  case T_PGFLT:
+    pagefault();
+    break;  
   case T_IRQ0 + IRQ_TIMER:
     if(cpunum() == 0){
       acquire(&tickslock);
diff --git a/user.h b/user.h
index f45b8d5..78f0146 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getnumfreepages(void);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..bd60daa 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getnumfreepages)
\ No newline at end of file
diff --git a/vm.c b/vm.c
index d9aaa7e..0a71cf1 100644
--- a/vm.c
+++ b/vm.c
@@ -6,10 +6,16 @@
 #include "mmu.h"
 #include "proc.h"
 #include "elf.h"
+#include "spinlock.h"
 
 extern char data[];  // defined by kernel.ld
 pde_t *kpgdir;  // for use in scheduler()
 
+struct {
+  struct spinlock lock;
+  uchar cnt[PHYSTOP/PGSIZE];
+} pgrefcnt;
+
 // Set up CPU's kernel segment descriptors.
 // Run once on entry on each CPU.
 void
@@ -144,9 +150,12 @@ setupkvm(void)
 
 // Allocate one page table for the machine for the kernel address
 // space for scheduler processes.
+//*** initialize pgrefcnt.cnt and pgrefcnt.lock
 void
 kvmalloc(void)
 {
+  initlock(&pgrefcnt.lock,"pgrefcnt");
+  memset(pgrefcnt.cnt,0,(PHYSTOP/PGSIZE)*sizeof(uchar));
   kpgdir = setupkvm();
   switchkvm();
 }
@@ -180,6 +189,7 @@ switchuvm(struct proc *p)
 
 // Load the initcode into address 0 of pgdir.
 // sz must be less than a page.
+// *** Initialize user page reference count to 1
 void
 inituvm(pde_t *pgdir, char *init, uint sz)
 {
@@ -190,6 +200,10 @@ inituvm(pde_t *pgdir, char *init, uint sz)
   mem = kalloc();
   memset(mem, 0, PGSIZE);
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
+  
+  acquire(&pgrefcnt.lock);
+  pgrefcnt.cnt[PRX(V2P(mem))]=1;
+  release(&pgrefcnt.lock);
   memmove(mem, init, sz);
 }
 
@@ -219,6 +233,7 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
+// *** Initialize user page reference count to 1 for each page
 int
 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
@@ -242,9 +257,11 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
       cprintf("allocuvm out of memory (2)\n");
       deallocuvm(pgdir, newsz, oldsz);
-      kfree(mem);
       return 0;
     }
+    acquire(&pgrefcnt.lock);
+    pgrefcnt.cnt[PRX(V2P(mem))]=1;
+    release(&pgrefcnt.lock);
   }
   return newsz;
 }
@@ -253,6 +270,8 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
+//*** Decrement user page reference count for all pages whose entries
+//*** are removed from pgdir and free the pages which are unreferenced.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
@@ -272,7 +291,14 @@ deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       if(pa == 0)
         panic("kfree");
       char *v = P2V(pa);
-      kfree(v);
+
+      acquire(&pgrefcnt.lock);
+      if(--pgrefcnt.cnt[PRX(pa)]==0)
+        kfree(v);      
+      if(pgrefcnt.cnt[PRX(pa)]<0)
+        panic("pgrefcount");
+      release(&pgrefcnt.lock);
+      
       *pte = 0;
     }
   }
@@ -311,15 +337,16 @@ clearpteu(pde_t *pgdir, char *uva)
   *pte &= ~PTE_U;
 }
 
-// Given a parent process's page table, create a copy
-// of it for a child.
+//*** Given a parent process's page table, create a copy of pagetable for its
+//*** child and increment the reference count of all the pages in mapped by the 
+//*** user virtual addresses. Also backup PTE_W bit into PTE_WCOW bit, set PTE_COW bit.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
-  char *mem;
+  //char *mem;
 
   if((d = setupkvm()) == 0)
     return 0;
@@ -330,16 +357,45 @@ copyuvm(pde_t *pgdir, uint sz)
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
+    //setup the PTE_COW and PTE_WCOW bits for pte if not set
+    if(!(flags & PTE_COW)){
+      if(*pte&PTE_W)
+        *pte|=PTE_WCOW;
+      *pte&=~PTE_W;
+      *pte|=PTE_COW;
+      flags=PTE_FLAGS(*pte);
+    }
+  
+    if(mappages(d, (void*)i, PGSIZE, pa , flags) < 0)
       goto bad;
+    acquire(&pgrefcnt.lock);
+    pgrefcnt.cnt[PRX(pa)]++;
+    release(&pgrefcnt.lock);
   }
+  //page table might have changed (proc->pgdir is passed as input)
+  lcr3(V2P(proc->pgdir));
   return d;
 
 bad:
   freevm(d);
+  //restore the pgdir
+  for(; i >=0; i -= PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    acquire(&pgrefcnt.lock);
+    // if ref cnt=1 can restore the flags now
+    if(pgrefcnt.cnt[PRX(pa)]==1){
+      if(*pte&PTE_WCOW)
+        *pte|=PTE_W; 
+      *pte&=(~PTE_WCOW)&(~PTE_COW);
+    }
+    release(&pgrefcnt.lock);
+  }
+  //page table might have changed
+  lcr3(V2P(proc->pgdir));  
   return 0;
 }
 
@@ -384,6 +440,67 @@ copyout(pde_t *pgdir, uint va, void *p, uint len)
   return 0;
 }
 
+//*** Handle page fault for CoW
+void
+pagefault(void)
+{
+  uint pa, va;
+  pte_t *pte;
+  char* mem;
+  int err=1;
+
+  va = (uint)rcr2();
+  pte = walkpgdir(proc->pgdir,(char*)va,0);
+
+  //basic checks
+  if(!proc){
+    cprintf("page fault w/o user process on cpu-id=%d, cr2=%x\n",cpunum(),rcr2()); 
+    panic("pagefault");
+  }
+  if(*pte & PTE_W){
+    cprintf("pagefault on cpu-id=%d, cr2=%x\n",cpunum(),rcr2()); 
+    panic("pagefault writable!");
+  }    
+  
+  //basic checks
+  if(!(*pte & PTE_P))
+    cprintf("pte not found!\n");
+  else if(!(*pte & PTE_U) || va>=KERNBASE )
+    cprintf("permission denied!\n");
+  else if(*pte & PTE_COW)
+  { //handle pagefault for CoW
+    err=0;
+    pa=PTE_ADDR(*pte);
+    acquire(&pgrefcnt.lock);
+    //allocate page if page-ref-count > 1
+    if(pgrefcnt.cnt[PRX(pa)]>1){
+      if((mem = kalloc()) == 0)
+        panic("kalloc: out of memory?");
+      memmove(mem, (char*)P2V(pa), PGSIZE);
+      pgrefcnt.cnt[PRX(pa)]--;
+      pgrefcnt.cnt[PRX(V2P(mem))]++; 
+      *pte = V2P(mem) | PTE_FLAGS(*pte);
+    }
+    release(&pgrefcnt.lock);
+    //restore the flags
+    if(*pte & PTE_WCOW)
+      *pte|=PTE_W;
+    *pte&=(~PTE_COW)&(~PTE_WCOW);    
+    //reload the page table
+    lcr3(V2P(proc->pgdir)); 
+  }
+  if(err) {
+    //process misbehaved
+    cprintf("pagefault pid %d %s: trap %d on cpu %d "
+            "addr 0x%x--kill proc\n",
+            proc->pid, proc->name, 14, cpunum(), rcr2());
+    proc->killed = 1;
+  }
+}
+
+
+
+
 //PAGEBREAK!
 // Blank page.
 //PAGEBREAK!
